<?php
/**
 * @file
 * dennis_requirements.install
 */

/**
 * Implements hook_requirements().
 */
function dennis_requirements_requirements($phase) {
  // Requirements based on CHANGELOG.txt.
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'runtime') {
    // Get a list of modules.
    $modules_enabled = system_list('module_enabled');

    // Get the Distro schema version.
    $distro_schema_version = $modules_enabled['dennis_core']->schema_version;

    // Get contents of site.make.
    $site_make = '';
    if (file_exists((conf_path() . '/site.make'))) {
      $site_make = file_get_contents(conf_path() . '/site.make');
    }

    // Get contents of Gruntfile.js.
    $site_gruntfile = '';
    if (file_exists((conf_path() . '/Gruntfile.js'))) {
      $site_gruntfile = file_get_contents(conf_path() . '/Gruntfile.js');
    }

    // Get the path to the theme.
    $theme_path = drupal_get_path('theme', variable_get('theme_default'));

    // Load wysiwyg settings.
    $wysiwyg_settings = wysiwyg_profile_load_all();

    // Distro 1.31.x
    if ($distro_schema_version >= 7162) {

      // Case 22799: Addthis is replaced by Sharerich.
      if (isset($modules_enabled['addthis'])) {
        $requirements['dennis_social'] = array(
          'title' => $t('Dennis Social'),
          'value' => _dennis_requirements_case_link(22799) .
            $t('Addthis module needs to be disabled. Sharerich should be used instead.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      // Case 22925: Google Adwords Remarketing is added to Distro and should be removed from site.make.
      if (stripos($site_make, '[google_adwords_remarketing]') !== FALSE ||
        stripos($site_make, '[google_remarketing_tag]') !== FALSE
      ) {
        $requirements['google_adwords_remarketing'] = array(
          'title' => $t('Google Remarketing Tag'),
          'value' => _dennis_requirements_case_link(22925) .
            $t('This module is part of distro and should be removed from site.make.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      // Case 23050: DFP was updated on Distro and should be removed from site.make.
      if (stripos($site_make, '[dfp]') !== FALSE) {
        $requirements['dfp'] = array(
          'title' => $t('DFP'),
          'value' => _dennis_requirements_case_link(23050) .
            $t('This module is part of distro and should be removed from site.make.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      // Case 23055: Cache busting on requirejs bundles.
      if ($site_gruntfile && stripos($site_gruntfile, "grunt.loadNpmTasks('grunt-hashres')") === FALSE) {
        $requirements['hashres'] = array(
          'title' => $t('Gruntfile.js'),
          'value' => _dennis_requirements_case_link(23055) .
            $t('To benefit from automatic cache busting on requirejs bundles, any Gruntfile optimising RequireJS files need to have a hashres task.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }

    // Distro 1.30.x
    if ($distro_schema_version >= 7161) {

      // #22527 Feeds - Covered by BDD @distro @seo @api @22527

      // #22907 Advanced Gallery.
      if (isset($modules_enabled['dennis_gallery'])) {
        $requirements['dennis_gallery'] = array(
          'title' => $t('Dennis Gallery'),
          'value' => _dennis_requirements_case_link(22907) .
            $t('Advanced Gallery is available. Use dennis_gallery_adv_migrate_from_gallery() to migrate and then disable Dennis Gallery on a separate release.'),
          'severity' => REQUIREMENT_WARNING,
        );
      }

      // #22633 DFP Out of page is no longer a block, it is now a context reaction.
      $context_reactions = context_reactions();
      if (isset($context_reactions['dfp_outofpage'])) {
        foreach (context_enabled_contexts() as $context) {
          if (isset($context->reactions['block']['blocks']['dfp-out_of_page'])) {
            $requirements['dfp'] = array(
              'title' => $t('DFP'),
              'value' => _dennis_requirements_case_link('W4808') .
                $t('DFP Out of page no longer renders as a block. Please edit the DFP Contexts and add a Reaction for DFP Out of Page.'),
              'severity' => REQUIREMENT_ERROR,
            );
          }
        }
      }
    }

    // Distro 1.29.x
    if ($distro_schema_version >= 7160) {
      // Require.js
      if (!$site_gruntfile || !variable_get('dennis_js_use', FALSE)) {
        $requirements['require_js_amd'] = array(
          'title' => $t('Require.js'),
          'value' => _dennis_requirements_case_link('W4777') .
            $t('Sites should consider converting all custom JavaScript code using the AMD module format and Require.js.'),
          'severity' => REQUIREMENT_WARNING,
        );
      }

      // CSS and JS aggregation.
      if (!isset($modules_enabled['advagg'])) {
        $requirements['advagg_disabled'] = array(
          'title' => $t('Advagg'),
          'value' => _dennis_requirements_case_link('21634') .
            $t('This module should be enabled to increase performance.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      if (!isset($modules_enabled['advagg_bundler'])) {
        $requirements['advagg_bundler_disabled'] = array(
          'title' => $t('AdvAgg Bundler'),
          'value' => _dennis_requirements_case_link('21634') .
            $t('This module should be enabled to increase performance.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      if (!isset($modules_enabled['advagg_css_compress'])) {
        $requirements['advagg_css_compress_disabled'] = array(
          'title' => $t('AdvAgg Compress CSS'),
          'value' => _dennis_requirements_case_link('21634') .
            $t('This module should be enabled to increase performance.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      if (!isset($modules_enabled['advagg_js_compress'])) {
        $requirements['advagg_js_compress_disabled'] = array(
          'title' => $t('AdvAgg Compress Javascript'),
          'value' => _dennis_requirements_case_link('21634') .
            $t('This module should be enabled to increase performance.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      if (!isset($modules_enabled['advagg_mod'])) {
        $requirements['advagg_mod_disabled'] = array(
          'title' => $t('AdvAgg Modifier'),
          'value' => _dennis_requirements_case_link('21634') .
            $t('This module should be enabled to increase performance.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      if (isset($modules_enabled['agrcache'])) {
        $requirements['agrcache_enabled'] = array(
          'title' => $t('Aggregate cache'),
          'value' => _dennis_requirements_case_link('21634') .
            $t('This module should be Disabled.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      if (!variable_get('preprocess_css', FALSE)) {
        $requirements['preprocess_css'] = array(
          'title' => $t('CSS preprocessing'),
          'value' => _dennis_requirements_case_link('21634#BugEvent.156511') .
            $t('CSS preprocessing has been disabled.'),
          'severity' => REQUIREMENT_WARNING,
        );
      }

      if (!variable_get('preprocess_js', FALSE)) {
        $requirements['preprocess_js'] = array(
          'title' => $t('JS preprocessing'),
          'value' => _dennis_requirements_case_link('21634#BugEvent.156511') .
            $t('JS preprocessing has been disabled.'),
          'severity' => REQUIREMENT_WARNING,
        );
      }

      if (!variable_get('advagg_enabled', FALSE) ||
        variable_get('advagg_css_compressor', FALSE) != 2
      ) {
        $requirements['aggregation_2'] = array(
          'title' => $t('CSS and JS aggregation'),
          'value' => _dennis_requirements_case_link('21634#BugEvent.156511') .
            $t('Sites should have CSS and JS aggregation turned on to increase performance.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      if (!variable_get('advagg_mod_css_adjust_sort_browsers', FALSE) ||
        !variable_get('advagg_mod_css_adjust_sort_external', FALSE) ||
        !variable_get('advagg_mod_css_adjust_sort_inline', FALSE) ||
        !variable_get('advagg_mod_js_adjust_sort_browsers', FALSE) ||
        !variable_get('advagg_mod_js_adjust_sort_external', FALSE) ||
        !variable_get('advagg_mod_js_adjust_sort_inline', FALSE)
      ) {
        $requirements['aggregation_3'] = array(
          'title' => $t('CSS and JS aggregation'),
          'value' => _dennis_requirements_case_link('21634#BugEvent.156511') .
            $t('Sites should have their CSS/JS stack sorted properly to make aggregation more efficient.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      // #22614 Client/Mosaic.
      // @todo
    }

    // Distro 1.28.x
    if ($distro_schema_version >= 7156) {

      // Remove any backported {SITE}_client_views_query_alter() hooks.
      // @todo this should be a manual task - we would need to check that the hook is making the same alteration.

      // Videos now play with YouTube's player as rendered file.
      $entity_info = entity_get_info();

      foreach ($entity_info['node']['bundles'] as $bundle_name => $info) {
        $field_instances = field_info_instances('node', $bundle_name);
        if (isset($field_instances['field_associated_video']) && isset($field_instances['field_associated_video']['display']['default']['type'])) {
          $node_field_format = $field_instances['field_associated_video']['display']['default'];

          // Check if the node field formatter is set to rendered file or hidden.
          if (!in_array($node_field_format['type'], array('hidden', 'file_rendered'))) {
            $requirements[$bundle_name . '_associated_videos'] = array(
              'title' => $t('Associated videos on %bundle content type', array('%bundle' => $bundle_name)),
              'value' => $t('Videos should use Rendered file format whenever possible.'),
              'severity' => REQUIREMENT_WARNING,
            );
          }
          // Check if the file display is using YouTube as the default display.
          if ($node_field_format['type'] == 'file_rendered' && $file_view_mode = $node_field_format['settings']['file_view_mode']) {
            $displays = file_displays('video', $file_view_mode);
            // Clean up unused file displays.
            foreach ($displays as $key => $display) {
              if (!$display['status']) {
                unset($displays[$key]);
              }
            }
            _file_sort_array_by_weight($displays);
            reset($displays);
            if (key($displays) != 'media_youtube_video') {
              $requirements[$bundle_name . '_associated_videos_youtube'] = array(
                'title' => $t('Associated videos on %bundle content type', array('%bundle' => $bundle_name)),
                'value' => $t('The configured file display should use YouTube as default.'),
                'severity' => REQUIREMENT_WARNING,
              );
            }
          }
        }
      }

      // Ensure NewsML module is removed from site repositories.
      if (isset($modules_enabled['newsml'])) {
        $requirements['newsml_enabled'] = array(
          'title' => $t('Newsml'),
          'value' => $t('This module should be disabled.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      // Superfish module should not be enabled.
      if (isset($modules_enabled['superfish'])) {
        $requirements['superfish_enabled'] = array(
          'title' => $t('Superfish'),
          'value' => $t('This module should be disabled.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

    }

    // Distro 1.27.x
    if ($distro_schema_version >= 7152) {

      // Services will need to be re-exported with version 3.5.
      // @todo will be re-exported as part of a distro upgrade.

      // #20912 Images will need to be migrated using 'drush migration_filepath'.
      // @todo

      // Added new Formatter for the RSS thumbnails.
      // @todo

      // #19829 Metatag_twitter_cards needs a site's twitter account & account id.
      $metatag_config = metatag_config_load('global');
      $required_metatags = array('twitter:site', 'twitter:site:id');
      foreach ($required_metatags as $name) {
        if (empty($metatag_config->config[$name]['value'])) {
          $requirements[$name] = array(
            'title' => $t(':name metatag', array(':name' => $name)),
            'value' => _dennis_requirements_case_link('19829') .
              $t(':name metatag should be set.', array(':name' => $name)),
            'severity' => REQUIREMENT_WARNING,
          );
        }
      }

      // Google_plusone module (now provided by distro) should be removed from site.make.
      if (stripos($site_make, '[google_plusone]') !== FALSE) {
        $requirements['google_plusone_make'] = array(
          'title' => $t('Google Plus One'),
          'value' => $t('This module is part of distro and should be removed from site.make.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      // Check that a default theme has been set.
      if (empty($theme_path)) {
        $requirements['default_theme'] = array(
          'title' => $t('Default theme'),
          'value' => $t('The default theme "@theme" cannot be found', array('@theme' => variable_get('theme_default'))),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      else {
        // #20229 If a site has its own page.tpl.php implementation add schema.org organizational markup.
        $file = file_scan_directory($theme_path, '/^page(--.+)?\.tpl\.php$/');
        if (!empty($file)) {
          $file = reset($file);
          if (file_exists($file->uri)) {
            if ($file_contents = file_get_contents($file->uri)) {
              if (stripos($file_contents, '<img property="logo"') == FALSE) {
                $requirements['organizational_markup'] = array(
                  'title' => $t('Organizational markup'),
                  'value' => _dennis_requirements_case_link('20229') .
                    $t('This site has its own page.tpl.php but the implementation of organizational markup is missing.'),
                  'severity' => REQUIREMENT_WARNING,
                );
              }
            }
          }
        }
      }
    }

    // Distro 1.26.x
    if ($distro_schema_version >= 7151) {

      // Enable dennis_disqus if site uses disqus.
      if (isset($modules_enabled['disqus']) && !isset($modules_enabled['dennis_disqus'])) {
        $requirements['disqus_enabled'] = array(
          'title' => $t('Dennis Disqus'),
          'value' => $t('This module needs to be enabled.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }

      // #19931 Smart paging seo replaces the Page Break button.
      foreach ($wysiwyg_settings as $name => $item) {
        if (isset($item->settings['buttons']['drupal']['smart_paging_seo']) &&
          $item->settings['buttons']['drupal']['smart_paging_seo'] == TRUE
        ) {}
        elseif (isset($item->settings['buttons']['drupal']['smart_paging']) &&
          $item->settings['buttons']['drupal']['smart_paging'] == TRUE
        ) {
          $requirements[$name . '_wysiwyg_sp'] = array(
            'title' => $t('Smart paging SEO on %name profile', array('%name' => $name)),
            'value' => _dennis_requirements_case_link('19931') .
              $t('You need to enable Smart paging SEO button in the Wysiwyg profile.'),
            'severity' => REQUIREMENT_WARNING,
          );
        }
      }
    }

    // Distro 1.23.x to 1.25.x
    if ($distro_schema_version >= 7146) {


    }


  }

  // Group and sort requirements.
  if (count($requirements) > 0) {
    // Add heading for requirements.
    $requirements['dennis_requirements'] = array(
      'title' => $t('Dennis Requirements'),
      'value' => $t(''),
      'severity' => REQUIREMENT_INFO,
      'weight' => 999,
    );

    $i = 1000;
    // Show errors first.
    foreach ($requirements as &$requirement) {
      if ($requirement['severity'] == REQUIREMENT_ERROR) {
        // Append [ERROR] to requirement error descriptions.
        $requirement['value'] .= ' [ERROR]';
        $requirement['weight'] = $i++;
      }
    }
    // Set warning weights.
    foreach ($requirements as &$requirement) {
      if ($requirement['severity'] == REQUIREMENT_WARNING) {
        $requirement['weight'] = $i++;
      }
    }
  }

  return $requirements;
}

/**
 * Helper to link to the cases.
 */
function _dennis_requirements_case_link($issue) {
  $t = get_t();
  return l($t('#') . $issue, 'https://didev.fogbugz.com/default.asp?' . $issue) . ' ';
}
